// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: CairoLexer.flex

package cairo;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.text.CharArrayUtil;
import com.intellij.psi.TokenType;
import cairo.psi.CairoTokens;


class CairoLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_BLOCK_COMMENT = 2;
  public static final int IN_RAW_STRING = 4;
  public static final int FN_DECL_START = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\32\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\4\45"+
    "\1\46\1\45\16\47\1\50\5\47\1\51\1\52\1\53"+
    "\1\54\1\55\1\43\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\47\1\64\1\65\1\47\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\47\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\47\1\104\1\105\1\106"+
    "\1\107\6\0\1\3\u01a2\0\2\3\326\0\u0100\110";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\16\30\1\34\1\35"+
    "\1\36\1\37\3\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\4\0\1\47\1\50\1\51\1\52\3\0"+
    "\2\21\2\0\1\53\1\0\1\54\1\55\1\56\1\57"+
    "\1\0\1\60\7\30\1\61\1\30\1\62\1\30\1\63"+
    "\7\30\1\64\1\0\11\30\1\65\1\66\3\0\1\67"+
    "\3\0\1\70\1\71\1\0\1\52\1\72\1\52\1\73"+
    "\1\21\1\73\1\0\1\21\1\74\3\0\1\21\1\75"+
    "\1\76\1\77\1\100\7\30\1\101\1\30\1\102\3\30"+
    "\1\103\1\30\1\104\2\30\1\105\1\106\11\30\1\107"+
    "\2\30\6\0\1\110\3\111\1\74\1\75\1\76\4\30"+
    "\1\112\1\113\2\30\1\114\1\115\2\30\1\116\1\117"+
    "\1\120\1\30\1\121\4\30\1\122\1\123\3\30\5\0"+
    "\1\74\3\0\1\75\3\0\1\76\1\124\1\125\1\30"+
    "\1\126\1\30\1\127\1\30\1\130\3\30\1\131\1\132"+
    "\1\30\1\133\1\134\2\0\1\30\1\135\1\30\1\136"+
    "\1\137\1\140\1\141\2\30\1\142\4\30\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0124\0\u0124\0\u0124\0\u0124\0\u0248\0\u0124\0\u0124\0\u0124"+
    "\0\u0124\0\u0124\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe"+
    "\0\u0124\0\u0447\0\u0490\0\u04d9\0\u0124\0\u0522\0\u0124\0\u0124"+
    "\0\u0124\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f\0\u06d8\0\u0721"+
    "\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u088e\0\u08d7\0\u0920\0\u0124"+
    "\0\u0124\0\u0124\0\u0124\0\u0969\0\u09b2\0\u09fb\0\u0124\0\u0a44"+
    "\0\u0a8d\0\u0ad6\0\u0124\0\u01ff\0\u0124\0\u0b1f\0\u0b68\0\u0bb1"+
    "\0\u0bfa\0\u0124\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0"+
    "\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4\0\u0124\0\u0f1d\0\u0124\0\u0124"+
    "\0\u0124\0\u0124\0\u0f66\0\u0522\0\u0faf\0\u0ff8\0\u1041\0\u108a"+
    "\0\u10d3\0\u111c\0\u1165\0\u0522\0\u11ae\0\u0522\0\u11f7\0\u0522"+
    "\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u0124"+
    "\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u16d0\0\u0124\0\u0124\0\u1719\0\u1762\0\u17ab\0\u0124"+
    "\0\u17f4\0\u183d\0\u1886\0\u0124\0\u0124\0\u18cf\0\u1918\0\u1961"+
    "\0\u19aa\0\u0124\0\u19f3\0\u19f3\0\u1a3c\0\u1a85\0\u1ace\0\u1b17"+
    "\0\u1b60\0\u1ba9\0\u0124\0\u1bf2\0\u1c3b\0\u0124\0\u0124\0\u1c84"+
    "\0\u1ccd\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u0522\0\u1e83"+
    "\0\u0522\0\u1ecc\0\u1f15\0\u1f5e\0\u0522\0\u1fa7\0\u0522\0\u1ff0"+
    "\0\u2039\0\u0522\0\u0522\0\u2082\0\u20cb\0\u2114\0\u215d\0\u21a6"+
    "\0\u21ef\0\u2238\0\u2281\0\u22ca\0\u0522\0\u2313\0\u235c\0\u23a5"+
    "\0\u23ee\0\u2437\0\u2480\0\u24c9\0\u2512\0\u0124\0\u0124\0\u1961"+
    "\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u2711\0\u275a"+
    "\0\u0522\0\u0522\0\u27a3\0\u27ec\0\u0522\0\u0522\0\u2835\0\u287e"+
    "\0\u0522\0\u0522\0\u0522\0\u28c7\0\u0522\0\u2910\0\u2959\0\u29a2"+
    "\0\u29eb\0\u0522\0\u0522\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u0124\0\u2c7c\0\u2cc5\0\u2d0e\0\u0124"+
    "\0\u2d57\0\u2da0\0\u2de9\0\u0124\0\u0522\0\u0522\0\u2e32\0\u0522"+
    "\0\u2e7b\0\u0522\0\u2ec4\0\u0522\0\u2f0d\0\u2f56\0\u2f9f\0\u0522"+
    "\0\u0522\0\u2fe8\0\u0522\0\u0522\0\u3031\0\u307a\0\u30c3\0\u0522"+
    "\0\u310c\0\u0522\0\u0522\0\u0522\0\u0522\0\u3155\0\u319e\0\u0522"+
    "\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u0124";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\0\2\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\10\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\5\1\35\4\36\1\37\1\5\1\40"+
    "\1\41\1\36\1\42\1\43\1\44\1\36\1\45\1\46"+
    "\1\36\1\47\1\36\1\50\1\51\2\36\1\52\1\53"+
    "\1\54\1\55\1\56\1\36\1\57\2\36\1\60\1\61"+
    "\1\62\1\63\1\0\17\64\1\65\4\64\1\66\64\64"+
    "\7\67\1\70\101\67\1\0\2\71\1\0\2\71\37\0"+
    "\4\72\4\0\27\72\117\0\2\6\1\0\2\6\144\0"+
    "\1\73\47\0\7\74\1\75\42\74\1\76\36\74\5\77"+
    "\7\100\1\0\35\100\1\101\35\100\1\77\42\0\1\102"+
    "\71\0\1\103\104\0\1\104\4\0\1\105\107\0\1\106"+
    "\1\0\11\27\10\0\1\107\6\0\1\27\1\0\1\110"+
    "\2\0\1\107\1\111\1\0\1\112\4\0\1\113\4\0"+
    "\1\112\2\0\1\114\31\0\1\106\1\0\11\27\10\0"+
    "\1\107\6\0\1\27\4\0\1\107\1\111\1\0\1\112"+
    "\11\0\1\112\47\0\1\115\112\0\1\116\1\117\110\0"+
    "\1\120\1\121\107\0\1\122\1\123\73\0\11\36\7\0"+
    "\4\36\4\0\27\36\32\0\11\36\7\0\4\36\4\0"+
    "\20\36\1\124\6\36\32\0\11\36\7\0\4\36\4\0"+
    "\17\36\1\125\7\36\32\0\11\36\7\0\4\36\4\0"+
    "\15\36\1\126\1\36\1\127\7\36\32\0\11\36\7\0"+
    "\4\36\4\0\12\36\1\130\1\36\1\131\10\36\1\132"+
    "\1\36\32\0\11\36\7\0\4\36\4\0\1\36\1\133"+
    "\12\36\1\134\1\135\11\36\32\0\11\36\7\0\4\36"+
    "\4\0\6\36\1\136\4\36\1\137\1\140\12\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\141\7\36\1\142"+
    "\11\36\32\0\11\36\7\0\4\36\4\0\1\36\1\143"+
    "\13\36\1\144\4\36\1\145\4\36\32\0\11\36\7\0"+
    "\4\36\4\0\17\36\1\146\2\36\1\147\4\36\14\0"+
    "\1\150\1\151\14\0\11\36\7\0\4\36\4\0\5\36"+
    "\1\152\21\36\32\0\11\36\7\0\4\36\4\0\5\36"+
    "\1\153\13\36\1\154\1\155\4\36\32\0\11\36\7\0"+
    "\4\36\4\0\17\36\1\156\6\36\1\157\32\0\11\36"+
    "\7\0\4\36\4\0\14\36\1\160\3\36\1\161\6\36"+
    "\32\0\11\36\7\0\4\36\4\0\7\36\1\162\17\36"+
    "\5\0\17\64\1\0\4\64\1\0\64\64\24\0\1\163"+
    "\103\0\1\164\101\0\1\70\101\0\2\71\1\0\2\71"+
    "\130\0\11\72\7\0\4\72\4\0\27\72\7\0\1\74"+
    "\1\0\1\74\2\0\1\74\4\0\1\74\10\0\1\74"+
    "\22\0\1\165\1\0\1\74\16\0\1\74\2\0\1\74"+
    "\1\0\1\74\1\166\2\0\1\167\6\0\5\100\7\0"+
    "\1\170\73\0\1\100\14\0\1\170\76\0\1\100\1\0"+
    "\1\100\7\0\1\100\10\0\1\100\22\0\1\171\1\0"+
    "\1\100\16\0\1\100\2\0\1\100\1\0\1\100\1\172"+
    "\2\0\1\173\31\0\1\174\73\0\1\175\10\0\1\176"+
    "\71\0\2\177\1\0\1\177\1\0\1\177\1\200\15\177"+
    "\1\201\64\177\23\202\1\0\1\202\11\203\17\202\1\204"+
    "\4\202\1\0\26\202\20\0\1\205\1\0\1\205\2\0"+
    "\11\206\17\0\1\206\60\0\2\207\26\0\1\207\63\0"+
    "\1\210\2\0\1\211\103\0\1\212\1\0\1\210\2\0"+
    "\1\211\1\213\101\0\7\214\21\0\1\214\60\0\11\215"+
    "\7\0\2\215\6\0\7\215\66\0\1\216\110\0\1\217"+
    "\74\0\11\36\7\0\4\36\4\0\5\36\1\220\21\36"+
    "\32\0\11\36\7\0\4\36\4\0\14\36\1\221\12\36"+
    "\32\0\11\36\7\0\4\36\4\0\1\36\1\222\25\36"+
    "\32\0\11\36\7\0\4\36\4\0\20\36\1\223\6\36"+
    "\32\0\11\36\7\0\4\36\4\0\22\36\1\224\4\36"+
    "\32\0\11\36\7\0\4\36\4\0\21\36\1\225\5\36"+
    "\32\0\11\36\7\0\4\36\4\0\12\36\1\226\14\36"+
    "\32\0\11\36\7\0\4\36\4\0\17\36\1\227\7\36"+
    "\32\0\11\36\7\0\4\36\4\0\16\36\1\230\10\36"+
    "\32\0\11\36\7\0\4\36\4\0\21\36\1\231\5\36"+
    "\32\0\11\36\7\0\4\36\4\0\15\36\1\232\11\36"+
    "\32\0\11\36\7\0\4\36\4\0\3\36\1\233\15\36"+
    "\1\234\5\36\32\0\11\36\7\0\4\36\4\0\4\36"+
    "\1\235\16\36\1\236\3\36\32\0\11\36\7\0\4\36"+
    "\4\0\21\36\1\237\5\36\32\0\11\36\7\0\4\36"+
    "\4\0\10\36\1\240\4\36\1\241\11\36\32\0\11\36"+
    "\7\0\4\36\4\0\2\36\1\242\24\36\14\0\1\150"+
    "\1\151\125\0\11\36\7\0\4\36\4\0\6\36\1\243"+
    "\12\36\1\244\5\36\32\0\11\36\7\0\4\36\4\0"+
    "\12\36\1\245\14\36\32\0\11\36\7\0\4\36\4\0"+
    "\1\36\1\246\15\36\1\247\7\36\32\0\11\36\7\0"+
    "\4\36\4\0\16\36\1\250\10\36\32\0\11\36\7\0"+
    "\4\36\4\0\1\36\1\251\20\36\1\252\4\36\32\0"+
    "\11\36\7\0\4\36\4\0\16\36\1\253\10\36\32\0"+
    "\11\36\7\0\4\36\4\0\20\36\1\254\6\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\255\21\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\256\2\36\1\257"+
    "\16\36\32\0\11\260\7\0\2\260\7\0\6\260\52\0"+
    "\11\261\7\0\2\261\7\0\6\261\52\0\11\262\7\0"+
    "\2\262\7\0\6\262\52\0\11\263\7\0\2\263\7\0"+
    "\6\263\52\0\11\264\7\0\2\264\7\0\6\264\52\0"+
    "\11\265\7\0\2\265\7\0\6\265\25\0\17\175\1\0"+
    "\4\175\1\266\64\175\2\177\1\0\1\177\1\0\104\177"+
    "\2\200\1\0\1\200\1\0\106\200\1\267\1\270\1\271"+
    "\17\200\1\177\64\200\25\0\11\203\10\0\1\107\6\0"+
    "\1\203\4\0\1\107\1\111\52\0\11\206\17\0\1\206"+
    "\60\0\11\206\17\0\1\206\5\0\1\111\52\0\2\207"+
    "\26\0\1\207\7\0\1\272\11\0\1\272\40\0\1\213"+
    "\112\0\1\213\112\0\1\213\102\0\7\214\21\0\1\214"+
    "\7\0\1\273\11\0\1\273\36\0\11\215\7\0\2\215"+
    "\6\0\7\215\1\0\1\274\11\0\1\274\36\0\11\36"+
    "\7\0\4\36\4\0\1\36\1\275\25\36\32\0\11\36"+
    "\7\0\4\36\4\0\20\36\1\276\1\277\5\36\32\0"+
    "\11\36\7\0\4\36\4\0\21\36\1\300\5\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\301\21\36\32\0"+
    "\11\36\7\0\4\36\4\0\13\36\1\302\13\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\303\21\36\32\0"+
    "\11\36\7\0\4\36\4\0\20\36\1\304\6\36\32\0"+
    "\11\36\7\0\4\36\4\0\12\36\1\305\14\36\32\0"+
    "\11\36\7\0\4\36\4\0\16\36\1\306\10\36\32\0"+
    "\11\36\7\0\4\36\4\0\17\36\1\307\7\36\32\0"+
    "\11\36\7\0\4\36\4\0\3\36\1\310\23\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\311\21\36\32\0"+
    "\11\36\7\0\4\36\4\0\23\36\1\312\3\36\32\0"+
    "\11\36\7\0\4\36\4\0\3\36\1\313\23\36\32\0"+
    "\11\36\7\0\4\36\4\0\22\36\1\314\4\36\32\0"+
    "\11\36\7\0\4\36\4\0\6\36\1\315\20\36\32\0"+
    "\11\36\7\0\4\36\4\0\21\36\1\316\5\36\32\0"+
    "\11\36\7\0\4\36\4\0\22\36\1\317\4\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\320\21\36\32\0"+
    "\11\36\7\0\4\36\4\0\10\36\1\321\16\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\322\21\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\323\21\36\32\0"+
    "\11\36\7\0\4\36\4\0\1\36\1\324\25\36\32\0"+
    "\11\36\7\0\4\36\4\0\17\36\1\325\7\36\32\0"+
    "\11\36\7\0\4\36\4\0\12\36\1\326\14\36\32\0"+
    "\11\327\7\0\2\327\7\0\6\327\52\0\11\167\7\0"+
    "\2\167\7\0\6\167\52\0\11\74\7\0\2\74\7\0"+
    "\6\74\52\0\11\330\7\0\2\330\7\0\6\330\52\0"+
    "\11\173\7\0\2\173\7\0\6\173\52\0\11\100\7\0"+
    "\2\100\7\0\6\100\27\0\1\267\134\0\1\331\1\0"+
    "\1\332\2\0\1\333\1\334\102\0\1\335\1\0\1\336"+
    "\2\0\1\337\1\340\102\0\1\341\1\0\1\342\2\0"+
    "\1\343\1\344\101\0\11\36\7\0\4\36\4\0\11\36"+
    "\1\345\15\36\32\0\11\36\7\0\4\36\4\0\21\36"+
    "\1\346\5\36\32\0\11\36\7\0\4\36\4\0\10\36"+
    "\1\347\16\36\32\0\11\36\7\0\4\36\4\0\5\36"+
    "\1\350\21\36\32\0\11\36\7\0\4\36\4\0\17\36"+
    "\1\351\7\36\32\0\11\36\7\0\4\36\4\0\5\36"+
    "\1\352\21\36\32\0\11\36\7\0\4\36\4\0\15\36"+
    "\1\353\11\36\32\0\11\36\7\0\4\36\4\0\7\36"+
    "\1\354\17\36\32\0\11\36\7\0\4\36\4\0\17\36"+
    "\1\355\7\36\32\0\11\36\7\0\4\36\4\0\10\36"+
    "\1\356\16\36\32\0\11\36\7\0\4\36\4\0\3\36"+
    "\1\357\23\36\32\0\11\36\7\0\4\36\4\0\17\36"+
    "\1\360\7\36\32\0\11\36\7\0\4\36\4\0\21\36"+
    "\1\361\5\36\32\0\11\36\7\0\4\36\4\0\6\36"+
    "\1\362\20\36\32\0\11\36\7\0\4\36\4\0\5\36"+
    "\1\363\21\36\32\0\11\36\7\0\4\36\4\0\5\36"+
    "\1\364\21\36\32\0\11\365\7\0\2\365\7\0\6\365"+
    "\52\0\11\366\7\0\2\366\7\0\6\366\60\0\1\334"+
    "\104\0\1\334\112\0\1\334\112\0\1\340\104\0\1\340"+
    "\112\0\1\340\112\0\1\344\104\0\1\344\112\0\1\344"+
    "\104\0\11\36\7\0\4\36\4\0\14\36\1\367\12\36"+
    "\32\0\11\36\7\0\4\36\4\0\14\36\1\370\12\36"+
    "\32\0\11\36\7\0\4\36\4\0\1\371\26\36\32\0"+
    "\11\36\7\0\4\36\4\0\14\36\1\372\12\36\32\0"+
    "\11\36\7\0\4\36\4\0\3\36\1\373\23\36\32\0"+
    "\11\36\7\0\4\36\4\0\21\36\1\374\5\36\32\0"+
    "\11\36\7\0\4\36\4\0\5\36\1\375\21\36\32\0"+
    "\11\166\7\0\2\166\7\0\6\166\52\0\11\172\7\0"+
    "\2\172\7\0\6\172\52\0\11\36\7\0\4\36\4\0"+
    "\22\36\1\376\4\36\32\0\11\36\7\0\4\36\4\0"+
    "\17\36\1\377\7\36\32\0\11\36\7\0\4\36\4\0"+
    "\5\36\1\u0100\21\36\32\0\11\36\7\0\4\36\4\0"+
    "\22\36\1\u0101\4\36\32\0\11\36\7\0\4\36\4\0"+
    "\12\36\1\u0102\14\36\32\0\11\36\7\0\4\36\4\0"+
    "\5\36\1\u0103\21\36\32\0\11\36\7\0\4\36\4\0"+
    "\20\36\1\u0104\6\36\13\0\1\u0105\16\0\11\36\7\0"+
    "\4\36\4\0\27\36\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13067];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\4\11\1\1\5\11\6\1\1\11"+
    "\3\1\1\11\1\1\3\11\16\1\4\11\3\1\1\11"+
    "\3\1\1\11\1\0\1\11\4\0\1\11\3\1\3\0"+
    "\2\1\2\0\1\11\1\0\4\11\1\0\24\1\1\11"+
    "\1\0\11\1\2\11\3\0\1\11\3\0\2\11\1\0"+
    "\3\1\1\11\2\1\1\0\2\1\3\0\1\11\2\1"+
    "\2\11\40\1\6\0\2\11\37\1\5\0\1\11\3\0"+
    "\1\11\3\0\1\11\20\1\2\0\16\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[261];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	private int start_comment;
	private int start_raw_string;
	private int raw_string_hashes;
	private int comment_depth;
	private boolean doc_comment;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CairoLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case IN_BLOCK_COMMENT: {
              yybegin(YYINITIAL); zzStartRead = start_comment; return CairoTokens.BLOCK_COMMENT;
            }  // fall though
            case 262: break;
            case IN_RAW_STRING: {
              yybegin(YYINITIAL); zzStartRead = start_raw_string; return CairoTokens.RAW_STRING_LIT;
            }  // fall though
            case 263: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 100: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 101: break;
          case 3:
            { yybegin(YYINITIAL); return CairoTokens.NOT;
            }
          // fall through
          case 102: break;
          case 4:
            { yybegin(YYINITIAL); return CairoTokens.HASH;
            }
          // fall through
          case 103: break;
          case 5:
            { yybegin(YYINITIAL); return CairoTokens.DOLLAR;
            }
          // fall through
          case 104: break;
          case 6:
            { yybegin(YYINITIAL); return CairoTokens.REMAINDER;
            }
          // fall through
          case 105: break;
          case 7:
            { yybegin(YYINITIAL); return CairoTokens.BITWISE_AND;
            }
          // fall through
          case 106: break;
          case 8:
            { yybegin(YYINITIAL); return CairoTokens.SINGLE_QUOTE;
            }
          // fall through
          case 107: break;
          case 9:
            { yybegin(YYINITIAL); return CairoTokens.OPEN_PAREN;
            }
          // fall through
          case 108: break;
          case 10:
            { yybegin(YYINITIAL); return CairoTokens.CLOSE_PAREN;
            }
          // fall through
          case 109: break;
          case 11:
            { yybegin(YYINITIAL); return CairoTokens.MULTIPLY;
            }
          // fall through
          case 110: break;
          case 12:
            { yybegin(YYINITIAL); return CairoTokens.PLUS;
            }
          // fall through
          case 111: break;
          case 13:
            { yybegin(YYINITIAL); return CairoTokens.COMMA;
            }
          // fall through
          case 112: break;
          case 14:
            { yybegin(YYINITIAL); return CairoTokens.MINUS;
            }
          // fall through
          case 113: break;
          case 15:
            { yybegin(YYINITIAL); return CairoTokens.DOT;
            }
          // fall through
          case 114: break;
          case 16:
            { yybegin(YYINITIAL); return CairoTokens.DIVIDE;
            }
          // fall through
          case 115: break;
          case 17:
            { yybegin(YYINITIAL); return CairoTokens.DEC_LIT;
            }
          // fall through
          case 116: break;
          case 18:
            { yybegin(YYINITIAL); return CairoTokens.COLON;
            }
          // fall through
          case 117: break;
          case 19:
            { yybegin(YYINITIAL); return CairoTokens.SEMICOLON;
            }
          // fall through
          case 118: break;
          case 20:
            { yybegin(YYINITIAL); return CairoTokens.LESS_THAN;
            }
          // fall through
          case 119: break;
          case 21:
            { yybegin(YYINITIAL); return CairoTokens.ASSIGN;
            }
          // fall through
          case 120: break;
          case 22:
            { yybegin(YYINITIAL); return CairoTokens.GREATER_THAN;
            }
          // fall through
          case 121: break;
          case 23:
            { yybegin(YYINITIAL); return CairoTokens.AT;
            }
          // fall through
          case 122: break;
          case 24:
            { yybegin(YYINITIAL); return CairoTokens.IDENTIFIER;
            }
          // fall through
          case 123: break;
          case 25:
            { yybegin(YYINITIAL); return CairoTokens.OPEN_SQUARE_BRACKET;
            }
          // fall through
          case 124: break;
          case 26:
            { yybegin(YYINITIAL); return CairoTokens.CLOSE_SQUARE_BRACKET;
            }
          // fall through
          case 125: break;
          case 27:
            { yybegin(YYINITIAL); return CairoTokens.BITWISE_XOR;
            }
          // fall through
          case 126: break;
          case 28:
            { yybegin(YYINITIAL); return CairoTokens.OPEN_BRACE;
            }
          // fall through
          case 127: break;
          case 29:
            { yybegin(YYINITIAL); return CairoTokens.BITWISE_OR;
            }
          // fall through
          case 128: break;
          case 30:
            { yybegin(YYINITIAL); return CairoTokens.CLOSE_BRACE;
            }
          // fall through
          case 129: break;
          case 31:
            { yybegin(YYINITIAL); return CairoTokens.BOX;
            }
          // fall through
          case 130: break;
          case 32:
            { yybegin(IN_BLOCK_COMMENT);
            }
          // fall through
          case 131: break;
          case 33:
            { yybegin(IN_RAW_STRING);
            }
          // fall through
          case 132: break;
          case 34:
            { if (yytext().length() >= raw_string_hashes) {
			// Greedily ate too many #'s ... lets rewind a sec.
			if (yytext().length() > raw_string_hashes) {
				yypushback(yytext().length() - raw_string_hashes);
			}
			yybegin(YYINITIAL);
			zzStartRead = start_raw_string;
			return CairoTokens.RAW_STRING_LIT;
		} else {
			yybegin(IN_RAW_STRING);
		}
            }
          // fall through
          case 133: break;
          case 35:
            { yybegin(FN_DECL_START); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 134: break;
          case 36:
            { System.out.println("start fn_decl_start (");
              yybegin(YYINITIAL);
//                    String funcation_decl = yytext().toString();
//                    int funcation_decl_end = funcation_decl.indexOf("(");
//                    zzStartRead += funcation_decl_end - 1;
//                    zzMarkedPos = zzStartRead + 1;
                    return CairoTokens.FN_DECLARATION;
            }
          // fall through
          case 135: break;
          case 37:
            { yybegin(YYINITIAL); return CairoTokens.NOT_EQUAL;
            }
          // fall through
          case 136: break;
          case 38:
            { yybegin(YYINITIAL); return CairoTokens.STRING_LIT;
            }
          // fall through
          case 137: break;
          case 39:
            { yybegin(YYINITIAL); return CairoTokens.THIN_ARROW;
            }
          // fall through
          case 138: break;
          case 40:
            { yybegin(YYINITIAL); return CairoTokens.DOUBLE_DOT;
            }
          // fall through
          case 139: break;
          case 41:
            { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead; doc_comment = false; comment_depth = 1;
            }
          // fall through
          case 140: break;
          case 42:
            { yybegin(YYINITIAL); return CairoTokens.LINE_COMMENT;
            }
          // fall through
          case 141: break;
          case 43:
            { yybegin(YYINITIAL); return CairoTokens.DOUBLE_COLON;
            }
          // fall through
          case 142: break;
          case 44:
            { yybegin(YYINITIAL); return CairoTokens.LESS_THAN_OR_EQUAL;
            }
          // fall through
          case 143: break;
          case 45:
            { yybegin(YYINITIAL); return CairoTokens.EQUAL;
            }
          // fall through
          case 144: break;
          case 46:
            { yybegin(YYINITIAL); return CairoTokens.FAT_ARROW;
            }
          // fall through
          case 145: break;
          case 47:
            { yybegin(YYINITIAL); return CairoTokens.GREATER_THAN_OR_EQUAL;
            }
          // fall through
          case 146: break;
          case 48:
            { yybegin(YYINITIAL); return CairoTokens.KW_AS;
            }
          // fall through
          case 147: break;
          case 49:
            { yybegin(FN_DECL_START); return CairoTokens.KW_FN;
            }
          // fall through
          case 148: break;
          case 50:
            { yybegin(YYINITIAL); return CairoTokens.KW_IF;
            }
          // fall through
          case 149: break;
          case 51:
            { yybegin(YYINITIAL); return CairoTokens.KW_IN;
            }
          // fall through
          case 150: break;
          case 52:
            { yybegin(IN_RAW_STRING); start_raw_string = zzStartRead; raw_string_hashes = yytext().length() - 1;
            }
          // fall through
          case 151: break;
          case 53:
            { if (--comment_depth == 0) {
			yybegin(YYINITIAL);
			zzStartRead = start_comment;
			return doc_comment ? CairoTokens.BLOCK_DOC_COMMENT : CairoTokens.BLOCK_COMMENT;
		} else {
			yybegin(IN_BLOCK_COMMENT);
		}
            }
          // fall through
          case 152: break;
          case 54:
            { yybegin(IN_BLOCK_COMMENT); ++comment_depth;
            }
          // fall through
          case 153: break;
          case 55:
            { yybegin(YYINITIAL); return CairoTokens.CHAR_LIT;
            }
          // fall through
          case 154: break;
          case 56:
            { yybegin(YYINITIAL); return CairoTokens.TRIPLE_DOT;
            }
          // fall through
          case 155: break;
          case 57:
            { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead; doc_comment = true; comment_depth = 1;
            }
          // fall through
          case 156: break;
          case 58:
            { yybegin(YYINITIAL); return CairoTokens.LINE_DOC_COMMENT;
            }
          // fall through
          case 157: break;
          case 59:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return CairoTokens.DEC_LIT;
            }
          // fall through
          case 158: break;
          case 60:
            { yybegin(YYINITIAL); return CairoTokens.BIN_LIT;
            }
          // fall through
          case 159: break;
          case 61:
            { yybegin(YYINITIAL); return CairoTokens.OCT_LIT;
            }
          // fall through
          case 160: break;
          case 62:
            { yybegin(YYINITIAL); return CairoTokens.HEX_LIT;
            }
          // fall through
          case 161: break;
          case 63:
            { yybegin(YYINITIAL); return CairoTokens.ASSIGN_LEFT_SHIFT;
            }
          // fall through
          case 162: break;
          case 64:
            { yybegin(YYINITIAL); return CairoTokens.ASSIGN_RIGHT_SHIFT;
            }
          // fall through
          case 163: break;
          case 65:
            { yybegin(YYINITIAL); return CairoTokens.KW_FOR;
            }
          // fall through
          case 164: break;
          case 66:
            { yybegin(YYINITIAL); return CairoTokens.KW_LET;
            }
          // fall through
          case 165: break;
          case 67:
            { yybegin(YYINITIAL); return CairoTokens.KW_MOD;
            }
          // fall through
          case 166: break;
          case 68:
            { yybegin(YYINITIAL); return CairoTokens.KW_MUT;
            }
          // fall through
          case 167: break;
          case 69:
            { yybegin(YYINITIAL); return CairoTokens.KW_PUB;
            }
          // fall through
          case 168: break;
          case 70:
            { yybegin(YYINITIAL); return CairoTokens.KW_REF;
            }
          // fall through
          case 169: break;
          case 71:
            { yybegin(YYINITIAL); return CairoTokens.KW_USE;
            }
          // fall through
          case 170: break;
          case 72:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(IN_BLOCK_COMMENT); start_comment = zzStartRead; doc_comment = true; comment_depth = 1;
            }
          // fall through
          case 171: break;
          case 73:
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, 3);
            { yybegin(YYINITIAL); return CairoTokens.LINE_DOC_COMMENT;
            }
          // fall through
          case 172: break;
          case 74:
            { yybegin(YYINITIAL); return CairoTokens.KW_ELSE;
            }
          // fall through
          case 173: break;
          case 75:
            { yybegin(YYINITIAL); return CairoTokens.KW_ENUM;
            }
          // fall through
          case 174: break;
          case 76:
            { yybegin(YYINITIAL); return CairoTokens.KW_IMPL;
            }
          // fall through
          case 175: break;
          case 77:
            { yybegin(YYINITIAL); return CairoTokens.KW_LOOP;
            }
          // fall through
          case 176: break;
          case 78:
            { yybegin(YYINITIAL); return CairoTokens.KW_MOVE;
            }
          // fall through
          case 177: break;
          case 79:
            { yybegin(YYINITIAL); return CairoTokens.KW_PRIV;
            }
          // fall through
          case 178: break;
          case 80:
            { yybegin(YYINITIAL); return CairoTokens.KW_PROC;
            }
          // fall through
          case 179: break;
          case 81:
            { yybegin(YYINITIAL); return CairoTokens.KW_SELF;
            }
          // fall through
          case 180: break;
          case 82:
            { yybegin(YYINITIAL); return CairoTokens.KW_TRUE;
            }
          // fall through
          case 181: break;
          case 83:
            { yybegin(YYINITIAL); return CairoTokens.KW_TYPE;
            }
          // fall through
          case 182: break;
          case 84:
            { yybegin(YYINITIAL); return CairoTokens.KW_BREAK;
            }
          // fall through
          case 183: break;
          case 85:
            { yybegin(YYINITIAL); return CairoTokens.KW_CONST;
            }
          // fall through
          case 184: break;
          case 86:
            { yybegin(YYINITIAL); return CairoTokens.KW_CRATE;
            }
          // fall through
          case 185: break;
          case 87:
            { yybegin(YYINITIAL); return CairoTokens.KW_FALSE;
            }
          // fall through
          case 186: break;
          case 88:
            { yybegin(YYINITIAL); return CairoTokens.KW_MATCH;
            }
          // fall through
          case 187: break;
          case 89:
            { yybegin(YYINITIAL); return CairoTokens.KW_SUPER;
            }
          // fall through
          case 188: break;
          case 90:
            { yybegin(YYINITIAL); return CairoTokens.KW_TRAIT;
            }
          // fall through
          case 189: break;
          case 91:
            { yybegin(YYINITIAL); return CairoTokens.KW_WHERE;
            }
          // fall through
          case 190: break;
          case 92:
            { yybegin(YYINITIAL); return CairoTokens.KW_WHILE;
            }
          // fall through
          case 191: break;
          case 93:
            { yybegin(YYINITIAL); return CairoTokens.KW_EXTERN;
            }
          // fall through
          case 192: break;
          case 94:
            { yybegin(YYINITIAL); return CairoTokens.KW_RETURN;
            }
          // fall through
          case 193: break;
          case 95:
            { yybegin(YYINITIAL); return CairoTokens.KW_STATIC;
            }
          // fall through
          case 194: break;
          case 96:
            { yybegin(YYINITIAL); return CairoTokens.KW_STRUCT;
            }
          // fall through
          case 195: break;
          case 97:
            { yybegin(YYINITIAL); return CairoTokens.KW_UNSAFE;
            }
          // fall through
          case 196: break;
          case 98:
            { yybegin(YYINITIAL); return CairoTokens.KW_CONTINUE;
            }
          // fall through
          case 197: break;
          case 99:
            { yybegin(YYINITIAL); return CairoTokens.KW_MACRO_RULES;
            }
          // fall through
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
